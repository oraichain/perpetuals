{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "base_asset_holding_cap": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fluctuation_limit_ratio": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "initial_margin_ratio": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "insurance_fund": {
              "type": [
                "string",
                "null"
              ]
            },
            "margin_engine": {
              "type": [
                "string",
                "null"
              ]
            },
            "open_interest_notional_cap": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pricefeed": {
              "type": [
                "string",
                "null"
              ]
            },
            "spot_price_twap_interval": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "spread_ratio": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "toll_ratio": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_owner"
      ],
      "properties": {
        "update_owner": {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap_input"
      ],
      "properties": {
        "swap_input": {
          "type": "object",
          "required": [
            "base_asset_limit",
            "can_go_over_fluctuation",
            "direction",
            "position_id",
            "quote_asset_amount"
          ],
          "properties": {
            "base_asset_limit": {
              "$ref": "#/definitions/Uint128"
            },
            "can_go_over_fluctuation": {
              "type": "boolean"
            },
            "direction": {
              "$ref": "#/definitions/Direction"
            },
            "position_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "quote_asset_amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap_output"
      ],
      "properties": {
        "swap_output": {
          "type": "object",
          "required": [
            "base_asset_amount",
            "direction",
            "position_id",
            "quote_asset_limit"
          ],
          "properties": {
            "base_asset_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "direction": {
              "$ref": "#/definitions/Direction"
            },
            "position_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "quote_asset_limit": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "settle_funding"
      ],
      "properties": {
        "settle_funding": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_open"
      ],
      "properties": {
        "set_open": {
          "type": "object",
          "required": [
            "open"
          ],
          "properties": {
            "open": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "migrate_liquidity"
      ],
      "properties": {
        "migrate_liquidity": {
          "type": "object",
          "required": [
            "liquidity_multiplier"
          ],
          "properties": {
            "fluctuation_limit_ratio": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "liquidity_multiplier": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "repeg_price"
      ],
      "properties": {
        "repeg_price": {
          "type": "object",
          "properties": {
            "new_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_whitelist"
      ],
      "properties": {
        "add_whitelist": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_whitelist"
      ],
      "properties": {
        "remove_whitelist": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Direction": {
      "type": "string",
      "enum": [
        "add_to_amm",
        "remove_from_amm"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
